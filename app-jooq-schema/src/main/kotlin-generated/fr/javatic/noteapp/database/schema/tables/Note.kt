/*
 * This file is generated by jOOQ.
 */
package fr.javatic.noteapp.database.schema.tables


import fr.javatic.jooq.KotlinLocalDateTimeConverter
import fr.javatic.jooq.UUIDv4Converter
import fr.javatic.noteapp.database.schema.Public
import fr.javatic.noteapp.database.schema.keys.NOTE_PKEY
import fr.javatic.noteapp.database.schema.keys.NOTE__NOTE_AUTHOR_ID_FKEY
import fr.javatic.util.UUIDv4
import kotlinx.datetime.LocalDateTime
import org.jooq.*
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Note(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
) : TableImpl<Record>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.note</code>
         */
        val NOTE: Note = Note()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>public.note.id</code>.
     */
    val ID: TableField<Record, UUIDv4?> = createField(
        DSL.name("id"),
        SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)),
        this,
        "",
        UUIDv4Converter()
    )

    /**
     * The column <code>public.note.created_at</code>.
     */
    val CREATED_AT: TableField<Record, LocalDateTime?> = createField(
        DSL.name("created_at"),
        SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)),
        this,
        "",
        KotlinLocalDateTimeConverter()
    )

    /**
     * The column <code>public.note.author_id</code>.
     */
    val AUTHOR_ID: TableField<Record, UUIDv4?> =
        createField(DSL.name("author_id"), SQLDataType.UUID.nullable(false), this, "", UUIDv4Converter())

    /**
     * The column <code>public.note.title</code>.
     */
    val TITLE: TableField<Record, String?> = createField(DSL.name("title"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>public.note.content</code>.
     */
    val CONTENT: TableField<Record, String?> = createField(DSL.name("content"), SQLDataType.VARCHAR, this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        aliased,
        parameters
    )

    /**
     * Create an aliased <code>public.note</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.note</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.note</code> table reference
     */
    constructor() : this(DSL.name("note"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>) : this(
        Internal.createPathAlias(
            child,
            key
        ), child, key, NOTE, null
    )

    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<Record> = NOTE_PKEY
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(NOTE__NOTE_AUTHOR_ID_FKEY)

    private lateinit var _user: User
    fun user(): User {
        if (!this::_user.isInitialized)
            _user = User(this, NOTE__NOTE_AUTHOR_ID_FKEY)

        return _user;
    }

    override fun `as`(alias: String): Note = Note(DSL.name(alias), this)
    override fun `as`(alias: Name): Note = Note(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Note = Note(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Note = Note(name, null)
}
