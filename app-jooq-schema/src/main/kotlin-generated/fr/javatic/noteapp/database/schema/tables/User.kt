/*
 * This file is generated by jOOQ.
 */
package fr.javatic.noteapp.database.schema.tables


import fr.javatic.jooq.UUIDv4Converter
import fr.javatic.noteapp.database.schema.Public
import fr.javatic.noteapp.database.schema.keys.USER_LOGIN_KEY
import fr.javatic.noteapp.database.schema.keys.USER_PKEY
import fr.javatic.util.UUIDv4
import org.jooq.*
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class User(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
) : TableImpl<Record>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.user</code>
         */
        val USER: User = User()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>public.user.id</code>.
     */
    val ID: TableField<Record, UUIDv4?> = createField(
        DSL.name("id"),
        SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)),
        this,
        "",
        UUIDv4Converter()
    )

    /**
     * The column <code>public.user.login</code>.
     */
    val LOGIN: TableField<Record, String?> = createField(DSL.name("login"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.user.fullname</code>.
     */
    val FULLNAME: TableField<Record, String?> = createField(DSL.name("fullname"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.user.roles</code>.
     */
    val ROLES: TableField<Record, Array<String?>?> = createField(DSL.name("roles"), SQLDataType.VARCHAR.getArrayDataType(), this, "")

    /**
     * The column <code>public.user.hashed_password</code>.
     */
    val HASHED_PASSWORD: TableField<Record, String?> = createField(DSL.name("hashed_password"), SQLDataType.VARCHAR.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.user</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.user</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.user</code> table reference
     */
    constructor() : this(DSL.name("user"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>) : this(Internal.createPathAlias(child, key), child, key, USER, null)

    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<Record> = USER_PKEY
    override fun getUniqueKeys(): List<UniqueKey<Record>> = listOf(USER_LOGIN_KEY)
    override fun `as`(alias: String): User = User(DSL.name(alias), this)
    override fun `as`(alias: Name): User = User(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): User = User(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): User = User(name, null)
}
